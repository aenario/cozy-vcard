// Generated by CoffeeScript 1.6.3
(function() {
  var ANDROID_RELATION_TYPES, VCardParser, regexps;

  regexps = {
    begin: /^BEGIN:VCARD$/i,
    end: /^END:VCARD$/i,
    simple: /^(version|fn|title|org|note)\:(.+)$/i,
    android: /^x-android-custom\:(.+)$/i,
    composedkey: /^item(\d{1,2})\.([^\:]+):(.+)$/,
    complex: /^([^\:\;]+);([^\:]+)\:(.+)$/,
    property: /^(.+)=(.+)$/
  };

  ANDROID_RELATION_TYPES = ['custom', 'assistant', 'brother', 'child', 'domestic partner', 'father', 'friend', 'manager', 'mother', 'parent', 'partner', 'referred by', 'relative', 'sister', 'spouse'];

  module.exports = VCardParser = (function() {
    function VCardParser(vcf) {
      this.reset();
      if (vcf) {
        this.read(vcf);
      }
    }

    VCardParser.prototype.reset = function() {
      this.contacts = [];
      this.currentContact = null;
      this.currentDatapoint = null;
      this.currentIndex = null;
      return this.currentVersion = "3.0";
    };

    VCardParser.prototype.read = function(vcf) {
      var line, _i, _len, _ref, _results;
      _ref = vcf.split(/\r?\n/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push(this.handleLine(line));
      }
      return _results;
    };

    VCardParser.prototype.handleLine = function(line) {
      if (regexps.begin.test(line)) {
        return this.currentContact = {
          datapoints: []
        };
      } else if (regexps.end.test(line)) {
        this.storeCurrentDatapoint();
        return this.contacts.push(this.currentContact);
      } else if (regexps.simple.test(line)) {
        return this.handleSimpleLine(line);
      } else if (regexps.android.test(line)) {
        return this.handleAndroidLine(line);
      } else if (regexps.composedkey.test(line)) {
        return this.handleComposedLine(line);
      } else if (regexps.complex.test(line)) {
        return this.handleComplexLine(line);
      }
    };

    VCardParser.prototype.storeCurrentDatapoint = function() {
      if (this.currentDatapoint) {
        this.currentContact.datapoints.push(this.currentDatapoint);
        return this.currentDatapoint = null;
      }
    };

    VCardParser.prototype.addDatapoint = function(name, type, value) {
      this.storeCurrentDatapoint();
      return this.currentContact.datapoints.push({
        name: name,
        type: type,
        value: value
      });
    };

    VCardParser.prototype.handleSimpleLine = function(line) {
      var all, key, value, _ref;
      _ref = line.match(regexps.simple), all = _ref[0], key = _ref[1], value = _ref[2];
      if (key === 'VERSION') {
        return this.currentversion = value;
      }
      if (key === 'TITLE' || key === 'ORG' || key === 'FN' || key === 'NOTE' || key === 'N' || key === 'BDAY') {
        return this.currentContact[key.toLowerCase()] = value;
      }
    };

    VCardParser.prototype.handleAndroidLine = function(line) {
      var all, parts, raw, type, value, _ref, _ref1;
      _ref = line.match(regexps.android), all = _ref[0], raw = _ref[1];
      parts = raw.split(';');
      switch (parts[0].replace('vnd.android.cursor.item/', '')) {
        case 'contact_event':
          value = parts[1];
          type = (_ref1 = parts[2]) === '0' || _ref1 === '2' ? parts[3] : parts[2] === '1' ? 'anniversary' : 'birthday';
          return this.currentContact.datapoints.push({
            name: 'about',
            type: type,
            value: value
          });
        case 'relation':
          value = parts[1];
          type = ANDROID_RELATION_TYPES[+parts[2]];
          if (type === 'custom') {
            type = parts[3];
          }
          return this.currentContact.datapoints.push({
            name: 'other',
            type: type,
            value: value
          });
      }
    };

    VCardParser.prototype.handleComposedLine = function(line) {
      var all, itemidx, key, part, properties, value, _ref;
      _ref = line.match(regexps.composedkey), all = _ref[0], itemidx = _ref[1], part = _ref[2], value = _ref[3];
      if (this.currentIndex === null || this.currentIndex !== itemidx) {
        this.storeCurrentDatapoint();
        this.currentDatapoint = {};
      }
      this.currentIndex = itemidx;
      part = part.split(';');
      key = part[0];
      properties = part.splice(1);
      value = value.split(';');
      if (value.length === 1) {
        value = value[0].replace('_$!<', '').replace('>!$_', '').replace('\\:', ':');
      }
      key = key.toLowerCase();
      if (key === 'x-ablabel' || key === 'x-abadr') {
        return this.currentDatapoint['type'] = value.toLowerCase();
      } else {
        this.handleProperties(this.currentDatapoint, properties);
        if (key === 'x-abdate') {
          key = 'about';
        }
        if (key === 'x-abrelatednames') {
          key = 'other';
        }
        this.currentDatapoint['name'] = key.toLowerCase();
        return this.currentDatapoint['value'] = value;
      }
    };

    VCardParser.prototype.handleComplexLine = function(line) {
      var all, key, properties, value, _ref;
      _ref = line.match(regexps.complex), all = _ref[0], key = _ref[1], properties = _ref[2], value = _ref[3];
      this.storeCurrentDatapoint();
      this.currentDatapoint = {};
      value = value.split(';');
      if (value.length === 1) {
        value = value[0];
      }
      key = key.toLowerCase();
      if (key === 'email' || key === 'tel' || key === 'adr' || key === 'url') {
        this.currentDatapoint['name'] = key;
      } else if (key === 'BDAY') {
        this.currentContact['BDAY'] = value;
        this.currentDatapoint = null;
        return;
      } else {
        this.currentDatapoint = null;
        return;
      }
      this.handleProperties(this.currentDatapoint, properties.split(';'));
      return this.currentDatapoint.value = value;
    };

    VCardParser.prototype.handleProperties = function(dp, properties) {
      var all, match, pname, property, pvalue, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        if (match = property.match(regexps.property)) {
          all = match[0], pname = match[1], pvalue = match[2];
          pvalue = pvalue.toLowerCase();
        } else if (property === 'PREF') {
          pname = 'pref';
          pvalue = true;
        } else {
          pname = 'type';
          pvalue = property.toLowerCase();
        }
        _results.push(dp[pname.toLowerCase()] = pvalue);
      }
      return _results;
    };

    return VCardParser;

  })();

  module.exports.toVCF = function(model) {
    var dp, i, key, out, prop, type, value, _i, _len, _ref, _ref1;
    out = ["BEGIN:VCARD"];
    out.push("VERSION:3.0");
    _ref = ['n', 'fn', 'bday', 'org', 'title', 'note'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prop = _ref[_i];
      value = model[prop];
      if (value) {
        out.push("" + (prop.toUpperCase()) + ":" + value);
      }
    }
    _ref1 = model.datapoints;
    for (i in _ref1) {
      dp = _ref1[i];
      key = dp.name.toUpperCase();
      type = dp.type.toUpperCase();
      value = dp.value;
      if (Array.isArray(value)) {
        value = value.join(';');
      }
      switch (key) {
        case 'ABOUT':
          if (type === 'ORG' || type === 'TITLE' || type === 'BDAY') {
            out.push("" + type + ":" + value);
          } else {
            out.push("X-" + type + ":" + value);
          }
          break;
        case 'OTHER':
          out.push("X-" + type + ":" + value);
          break;
        default:
          out.push("" + key + ";TYPE=" + type + ":" + value);
      }
    }
    out.push("END:VCARD");
    return out.join("\n") + "\n";
  };

}).call(this);
